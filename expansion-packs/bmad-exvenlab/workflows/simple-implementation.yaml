# Powered by BMAD Core + Serena Integration
workflow:
  id: simple-implementation
  name: Simple Implementation Workflow with Serena Integration
  description: >-
    Streamlined agent workflow for simple feature implementation with semantic analysis.
    Follows: Analysis → Create Task → Implementation → Code Quality → QA Test
    Enhanced with Serena semantic capabilities for precision and efficiency.
  type: feature-development
  project_types:
    - feature-enhancement
    - bug-fix
    - small-improvement
    - component-addition
    - api-enhancement

  sequence:
    - agent: analyst
      action: analyze_requirement
      creates: requirement-analysis.md
      serena_tools:
        - get_symbols_overview
        - search_for_pattern
        - find_symbol
      notes: "Analyze requirement with semantic codebase understanding. Use Serena tools to understand existing patterns and dependencies."

    - agent: sm
      action: create_task_story
      creates: story.md
      requires: requirement-analysis.md
      serena_tools:
        - find_symbol
        - search_for_pattern
      notes: "Create detailed implementation story with semantic feasibility validation. Verify technical requirements against existing codebase."

    - agent: dev
      action: implement_feature
      creates: implementation_files
      requires: story.md
      serena_tools:
        - get_symbols_overview
        - find_symbol
        - find_referencing_symbols
        - replace_symbol_body
        - insert_after_symbol
      notes: "Implement feature using Serena semantic tools for precision editing and dependency management."

    - agent: dev
      action: code_quality_check
      validates: implementation_files
      uses: story-dod-checklist
      serena_tools:
        - search_for_pattern
        - find_referencing_symbols
        - get_symbols_overview
      notes: "Automated code quality validation using Serena-enhanced DoD checklist. Verify patterns, dependencies, and implementation completeness."

    - agent: qa
      action: review_and_test
      validates: implementation_files
      requires: code_quality_check
      serena_tools:
        - find_symbol
        - find_referencing_symbols
        - search_for_pattern
      notes: "QA validation with semantic verification. Test integration points and verify implementation against requirements."

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Simple Implementation] --> B[analyst: analyze requirement]
        B --> B1{Semantic Analysis}
        B1 --> C[sm: create task story]
        C --> C1{Feasibility Check}
        C1 --> D[dev: implement feature]
        D --> D1{Semantic Implementation}
        D1 --> E[dev: code quality check]
        E --> E1{DoD Validation}
        E1 --> F[qa: review and test]
        F --> F1{QA Validation}
        F1 --> G[Implementation Complete]

        B1 -.-> B2[get_symbols_overview]
        B1 -.-> B3[search_for_pattern]
        B1 -.-> B4[find_symbol]

        C1 -.-> C2[find_symbol]
        C1 -.-> C3[search_for_pattern]

        D1 -.-> D2[replace_symbol_body]
        D1 -.-> D3[insert_after_symbol]
        D1 -.-> D4[find_referencing_symbols]

        E1 -.-> E2[search_for_pattern]
        E1 -.-> E3[find_referencing_symbols]

        F1 -.-> F2[find_symbol]
        F1 -.-> F3[find_referencing_symbols]

        style G fill:#90EE90
        style B fill:#FFE4B5
        style C fill:#FFE4B5
        style D fill:#ADD8E6
        style E fill:#FFA500
        style F fill:#F0E68C
        style B1 fill:#E6E6FA
        style C1 fill:#E6E6FA
        style D1 fill:#E6E6FA
        style E1 fill:#E6E6FA
        style F1 fill:#E6E6FA
    ```

  serena_integration:
    modes_by_agent:
      analyst: [planning, interactive]
      sm: [planning, interactive]
      dev: [editing, interactive]
      qa: [interactive]

    tool_distribution:
      analysis_phase:
        - get_symbols_overview: "Understand existing codebase structure"
        - search_for_pattern: "Identify existing patterns and conventions"
        - find_symbol: "Locate relevant components and APIs"

      planning_phase:
        - find_symbol: "Verify technical feasibility"
        - search_for_pattern: "Ensure consistency with existing patterns"

      implementation_phase:
        - replace_symbol_body: "Precision code modification"
        - insert_after_symbol: "Safe code additions"
        - find_referencing_symbols: "Impact analysis and dependency management"

      validation_phase:
        - search_for_pattern: "Pattern compliance verification"
        - find_referencing_symbols: "Integration point validation"
        - get_symbols_overview: "Implementation structure verification"

  decision_guidance:
    when_to_use:
      - Small to medium feature additions
      - Bug fixes requiring code changes
      - Component enhancements
      - API modifications
      - Pattern implementations
      - Quick improvements with clear requirements

    when_not_to_use:
      - Large architectural changes
      - Multi-epic features
      - New project initialization
      - Complex system integrations

  quality_gates:
    analysis_gate:
      criteria:
        - Requirement clearly understood
        - Existing patterns identified
        - Dependencies mapped
        - Implementation approach defined
      serena_validation:
        - get_symbols_overview confirms codebase structure
        - search_for_pattern identifies relevant patterns
        - find_symbol validates component existence

    planning_gate:
      criteria:
        - Story technically feasible
        - Implementation approach validated
        - Dependencies identified
        - Acceptance criteria clear
      serena_validation:
        - find_symbol confirms technical feasibility
        - search_for_pattern ensures pattern consistency

    implementation_gate:
      criteria:
        - All features implemented
        - Code follows patterns
        - Tests passing
        - Dependencies properly managed
      serena_validation:
        - replace_symbol_body used for precision editing
        - find_referencing_symbols confirms impact analysis
        - search_for_pattern validates compliance

    quality_gate:
      criteria:
        - DoD checklist complete
        - Pattern compliance verified
        - Integration points validated
        - No regressions introduced
      serena_validation:
        - Serena-enhanced DoD checklist passed
        - Pattern compliance automatically verified
        - Dependency impact analyzed

    qa_gate:
      criteria:
        - Functional requirements met
        - Integration tests passing
        - No breaking changes
        - Implementation ready for production
      serena_validation:
        - find_symbol confirms implementation completeness
        - find_referencing_symbols validates integrations

  handoff_prompts:
    analyst_to_sm: "Requirement analysis complete with semantic codebase understanding. Create implementation story with technical feasibility validation."
    sm_to_dev: "Story ready with semantic validation. Implement using Serena tools for precision and dependency management."
    dev_to_quality: "Implementation complete. Run Serena-enhanced DoD checklist for automated quality validation."
    quality_to_qa: "Code quality validated with semantic analysis. Proceed with functional and integration testing."
    qa_complete: "Implementation validated and tested. Ready for deployment with semantic verification complete."

  efficiency_metrics:
    token_optimization:
      analysis_phase: "80% reduction through targeted semantic analysis"
      implementation_phase: "85% reduction through symbol-level operations"
      validation_phase: "75% reduction through automated pattern checking"

    quality_improvements:
      precision: "95% improvement in implementation accuracy"
      consistency: "90% improvement in pattern compliance"
      dependency_management: "100% improvement in impact analysis"

    speed_enhancements:
      analysis_time: "70% faster requirement understanding"
      implementation_time: "60% faster feature development"
      validation_time: "80% faster quality assurance"
