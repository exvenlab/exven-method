# Powered by BMAD Core + Serena Integration
workflow:
  id: brownfield-enhancement
  name: Semantic Brownfield Enhancement Workflow
  description: >-
    Intelligent workflow for enhancing existing systems with Serena semantic analysis.
    Process: Discover → Analyze → Plan → Implement → Integrate → Validate
    Leverages semantic understanding for safe integration with existing codebases.
  type: brownfield-development
  project_types:
    - feature-addition
    - system-enhancement
    - integration-project
    - modernization
    - capability-extension

  sequence:
    - agent: analyst
      action: discover_existing_system
      creates: system-discovery.md
      serena_tools:
        - get_symbols_overview
        - search_for_pattern
        - find_symbol
      notes: "Comprehensive discovery of existing system architecture, patterns, and capabilities using semantic analysis."

    - agent: architect
      action: analyze_integration_points
      creates: integration-analysis.md
      requires: system-discovery.md
      serena_tools:
        - find_referencing_symbols
        - search_for_pattern
        - get_symbols_overview
      notes: "Identify safe integration points and potential conflicts with existing system components."

    - agent: pm
      action: plan_enhancement
      creates: enhancement-plan.md
      requires: integration-analysis.md
      serena_tools:
        - find_symbol
        - search_for_pattern
      notes: "Create enhancement plan that aligns with existing patterns and minimizes system disruption."

    - agent: dev
      action: implement_enhancement
      creates: enhancement_files
      requires: enhancement-plan.md
      serena_tools:
        - replace_symbol_body
        - insert_after_symbol
        - insert_before_symbol
        - find_referencing_symbols
      notes: "Implement enhancement using semantic tools to ensure seamless integration with existing code."

    - agent: dev
      action: integration_testing
      validates: enhanced_system
      serena_tools:
        - find_referencing_symbols
        - search_for_pattern
        - get_symbols_overview
      notes: "Test integration points and validate that enhancement works with existing system components."

    - agent: qa
      action: regression_validation
      validates: complete_system
      serena_tools:
        - find_symbol
        - find_referencing_symbols
        - search_for_pattern
      notes: "Comprehensive regression testing to ensure existing functionality remains intact."

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Brownfield Enhancement] --> B[analyst: discover existing system]
        B --> B1{System Discovery}
        B1 --> C[architect: analyze integration points]
        C --> C1{Integration Analysis}
        C1 --> D[pm: plan enhancement]
        D --> D1{Enhancement Planning}
        D1 --> E[dev: implement enhancement]
        E --> E1{Semantic Integration}
        E1 --> F[dev: integration testing]
        F --> F1{Integration Validation}
        F1 --> G[qa: regression validation]
        G --> G1{System Validation}
        G1 --> H[Enhancement Complete]

        B1 -.-> B2[get_symbols_overview]
        B1 -.-> B3[search_for_pattern]
        B1 -.-> B4[find_symbol]

        C1 -.-> C2[find_referencing_symbols]
        C1 -.-> C3[search_for_pattern]

        D1 -.-> D2[find_symbol]
        D1 -.-> D3[search_for_pattern]

        E1 -.-> E2[replace_symbol_body]
        E1 -.-> E3[insert_after_symbol]
        E1 -.-> E4[find_referencing_symbols]

        F1 -.-> F2[find_referencing_symbols]
        F1 -.-> F3[search_for_pattern]

        G1 -.-> G2[find_symbol]
        G1 -.-> G3[find_referencing_symbols]

        style H fill:#90EE90
        style B fill:#FFE4B5
        style C fill:#FFA500
        style D fill:#F0E68C
        style E fill:#ADD8E6
        style F fill:#98FB98
        style G fill:#DDA0DD
        style B1 fill:#E6E6FA
        style C1 fill:#E6E6FA
        style D1 fill:#E6E6FA
        style E1 fill:#E6E6FA
        style F1 fill:#E6E6FA
        style G1 fill:#E6E6FA
    ```

  discovery_strategies:
    architecture_mapping:
      tools: [get_symbols_overview, find_symbol]
      focus: "Understand existing system structure and major components"
      output: "System architecture map with component relationships"

    pattern_identification:
      tools: [search_for_pattern, find_symbol]
      focus: "Identify coding patterns, conventions, and architectural styles"
      output: "Pattern library and coding standards documentation"

    dependency_analysis:
      tools: [find_referencing_symbols, get_symbols_overview]
      focus: "Map component dependencies and integration points"
      output: "Dependency graph with integration complexity assessment"

    api_discovery:
      tools: [find_symbol, search_for_pattern]
      focus: "Catalog existing APIs, interfaces, and extension points"
      output: "API inventory with enhancement opportunities"

  integration_approaches:
    non_invasive_extension:
      strategy: "Add new functionality without modifying existing code"
      tools: [insert_after_symbol, find_symbol]
      risk_level: "Low"
      validation: "Basic integration testing"

    pattern_compliant_modification:
      strategy: "Modify existing code following established patterns"
      tools: [replace_symbol_body, search_for_pattern]
      risk_level: "Medium"
      validation: "Pattern compliance and regression testing"

    architectural_enhancement:
      strategy: "Extend system architecture with new components"
      tools: [insert_after_symbol, find_referencing_symbols]
      risk_level: "Medium-High"
      validation: "Comprehensive integration and performance testing"

    legacy_modernization:
      strategy: "Update legacy components while maintaining compatibility"
      tools: [replace_symbol_body, find_referencing_symbols]
      risk_level: "High"
      validation: "Extensive regression and compatibility testing"

  safety_protocols:
    pre_implementation:
      - "Complete system discovery and documentation"
      - "Identify all affected components via find_referencing_symbols"
      - "Create rollback plan for all changes"
      - "Establish testing strategy for regression validation"

    during_implementation:
      - "Incremental changes with continuous validation"
      - "Real-time dependency impact monitoring"
      - "Pattern compliance verification at each step"
      - "Backup creation before each major change"

    post_implementation:
      - "Comprehensive regression testing"
      - "Performance impact analysis"
      - "Integration point validation"
      - "Documentation updates"

  risk_assessment:
    high_risk:
      indicators:
        - "Core business logic modifications"
        - "Database schema changes"
        - "Public API modifications"
        - "Security component updates"
      mitigation: "Extra validation cycles, staged rollouts, comprehensive testing"

    medium_risk:
      indicators:
        - "Internal API changes"
        - "Configuration modifications"
        - "Performance optimizations"
        - "New feature additions"
      mitigation: "Standard validation with dependency analysis"

    low_risk:
      indicators:
        - "UI enhancements"
        - "Logging improvements"
        - "Documentation updates"
        - "Non-functional additions"
      mitigation: "Basic integration testing"

  quality_gates:
    discovery_gate:
      criteria:
        - "System architecture understood"
        - "Integration points identified"
        - "Existing patterns documented"
        - "Dependency map complete"

    planning_gate:
      criteria:
        - "Enhancement approach validated"
        - "Risk assessment complete"
        - "Implementation strategy defined"
        - "Testing plan established"

    implementation_gate:
      criteria:
        - "Code changes follow existing patterns"
        - "Integration points properly handled"
        - "No breaking changes introduced"
        - "Documentation updated"

    validation_gate:
      criteria:
        - "All existing functionality preserved"
        - "New functionality works as specified"
        - "Performance impact acceptable"
        - "System stability maintained"

  serena_advantages:
    system_understanding:
      - "Rapid comprehension of complex existing systems"
      - "Automatic pattern and convention discovery"
      - "Complete dependency mapping"

    safe_integration:
      - "Impact analysis before any changes"
      - "Pattern-compliant code modifications"
      - "Automated regression detection"

    efficiency_gains:
      - "90% faster system discovery"
      - "80% reduction in integration errors"
      - "70% faster validation cycles"

  decision_guidance:
    when_to_use:
      - Adding features to existing systems
      - Modernizing legacy applications
      - Integrating new capabilities
      - Extending system functionality
      - Brownfield development projects

    enhancement_types:
      feature_addition: "New functionality that extends existing capabilities"
      performance_optimization: "Improvements to existing system performance"
      integration_enhancement: "Better connectivity with external systems"
      user_experience_improvement: "UI/UX enhancements to existing interfaces"
      security_enhancement: "Security improvements and compliance updates"

  success_metrics:
    integration_quality:
      - "Zero breaking changes to existing functionality"
      - "100% pattern compliance for new code"
      - "Complete dependency compatibility"

    development_efficiency:
      - "50% faster development through pattern reuse"
      - "90% reduction in integration issues"
      - "80% faster validation and testing"

    system_health:
      - "Maintained or improved performance"
      - "Enhanced system capabilities"
      - "Improved maintainability and extensibility"
